// Decompiled by Jad v1.5.8e. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.geocities.com/kpdus/jad.html
// Decompiler options: packimports(3) 

package org.bouncycastle.crypto;


// Referenced classes of package org.bouncycastle.crypto:
//            BlockCipher, DataLengthException, InvalidCipherTextException, CipherParameters

public class BufferedBlockCipher
{

    protected BufferedBlockCipher()
    {
    }

    public BufferedBlockCipher(BlockCipher blockcipher)
    {
        cipher = blockcipher;
        buf = new byte[blockcipher.getBlockSize()];
        bufOff = 0;
        String s = blockcipher.getAlgorithmName();
        int i = s.indexOf('/') + 1;
        pgpCFB = i > 0 && s.startsWith("PGP", i);
        if(pgpCFB)
            partialBlockOkay = true;
        else
            partialBlockOkay = i > 0 && (s.startsWith("CFB", i) || s.startsWith("OFB", i) || s.startsWith("OpenPGP", i) || s.startsWith("SIC", i) || s.startsWith("GCTR", i));
    }

    public BlockCipher getUnderlyingCipher()
    {
        return cipher;
    }

    public void init(boolean flag, CipherParameters cipherparameters)
        throws IllegalArgumentException
    {
        forEncryption = flag;
        reset();
        cipher.init(flag, cipherparameters);
    }

    public int getBlockSize()
    {
        return cipher.getBlockSize();
    }

    public int getUpdateOutputSize(int i)
    {
        int j = i + bufOff;
        int k;
        if(pgpCFB)
            k = j % buf.length - (cipher.getBlockSize() + 2);
        else
            k = j % buf.length;
        return j - k;
    }

    public int getOutputSize(int i)
    {
        return i + bufOff;
    }

    public int processByte(byte byte0, byte abyte0[], int i)
        throws DataLengthException, IllegalStateException
    {
        int j = 0;
        buf[bufOff++] = byte0;
        if(bufOff == buf.length)
        {
            j = cipher.processBlock(buf, 0, abyte0, i);
            bufOff = 0;
        }
        return j;
    }

    public int processBytes(byte abyte0[], int i, int j, byte abyte1[], int k)
        throws DataLengthException, IllegalStateException
    {
        if(j < 0)
            throw new IllegalArgumentException("Can't have a negative input length!");
        int l = getBlockSize();
        int i1 = getUpdateOutputSize(j);
        if(i1 > 0 && k + i1 > abyte1.length)
            throw new DataLengthException("output buffer too short");
        int j1 = 0;
        int k1 = buf.length - bufOff;
        if(j > k1)
        {
            System.arraycopy(abyte0, i, buf, bufOff, k1);
            j1 += cipher.processBlock(buf, 0, abyte1, k);
            bufOff = 0;
            j -= k1;
            for(i += k1; j > buf.length; i += l)
            {
                j1 += cipher.processBlock(abyte0, i, abyte1, k + j1);
                j -= l;
            }

        }
        System.arraycopy(abyte0, i, buf, bufOff, j);
        bufOff += j;
        if(bufOff == buf.length)
        {
            j1 += cipher.processBlock(buf, 0, abyte1, k + j1);
            bufOff = 0;
        }
        return j1;
    }

    public int doFinal(byte abyte0[], int i)
        throws DataLengthException, IllegalStateException, InvalidCipherTextException
    {
        int j = 0;
        if(i + bufOff > abyte0.length)
            throw new DataLengthException("output buffer too short for doFinal()");
        if(bufOff != 0 && partialBlockOkay)
        {
            cipher.processBlock(buf, 0, buf, 0);
            j = bufOff;
            bufOff = 0;
            System.arraycopy(buf, 0, abyte0, i, j);
        } else
        if(bufOff != 0)
            throw new DataLengthException("data not block size aligned");
        reset();
        return j;
    }

    public void reset()
    {
        for(int i = 0; i < buf.length; i++)
            buf[i] = 0;

        bufOff = 0;
        cipher.reset();
    }

    protected byte buf[];
    protected int bufOff;
    protected boolean forEncryption;
    protected BlockCipher cipher;
    protected boolean partialBlockOkay;
    protected boolean pgpCFB;
}
